{
  "max_apps": 8,
  "defines": {
    "OOPSY_TARGET_HAS_OLED": 1,
    "OOPSY_IO_COUNT": 4,
    "OOPSY_TARGET_HAS_MIDI_INPUT": 1,
    "OOPSY_TARGET_HAS_MIDI_OUTPUT": 1,
    "OOPSY_HAS_ENCODER": 1
  },
  "inserts": {},
  "labels": {
    "params": {
      "knob1": "kn1",
      "knob2": "kn2",
      "knob3": "kn3",
      "knob4": "kn4",
      "gate1": "gt1",
      "gate2": "gt2",
      "knob": "kn1",
      "cv": "kn1",
      "cv1": "kn1",
      "cv2": "kn2",
      "cv3": "kn3",
      "cv4": "kn4",
      "ctrl": "kn1",
      "ctrl1": "kn1",
      "ctrl2": "kn2",
      "ctrl3": "kn3",
      "ctrl4": "kn4",
      "gate": "gt1"
    },
    "outs": {
      "cv1": "cvout1",
      "cv2": "cvout2",
      "gate1": "gateout1",
      "cv": "cvout1",
      "gate": "gateout1"
    },
    "datas": {
      "midi": "dsy_midi_out"
    }
  },
  "inputs": {
    "kn1": {
      "automap": true,
      "code": "hardware.kn1.Value();"
    },
    "kn2": {
      "automap": true,
      "code": "hardware.kn2.Value();"
    },
    "kn3": {
      "automap": true,
      "code": "hardware.kn3.Value();"
    },
    "kn4": {
      "automap": true,
      "code": "hardware.kn4.Value();"
    },
    "gt1": {
      "code": "(hardware.gt1.State()?1.f:0.f);"
    },
    "gt2": {
      "code": "(hardware.gt2.State()?1.f:0.f);"
    }
  },
  "outputs": {
    "cvout1": {
      "where": "main",
      "code": "hardware.seed.dac.WriteValue(daisy::DacHandle::Channel::ONE, cvout1 * 4095);"
    },
    "cvout2": {
      "where": "main",
      "code": "hardware.seed.dac.WriteValue(daisy::DacHandle::Channel::TWO, cvout1 * 4095);"
    },
    "gateout1": {
      "where": "audio",
      "code": "dsy_gpio_write(&hardware.gate_output, $<name> > 0.f);"
    }
  },
  "datahandlers": {
    "dsy_midi_out": {
      "where": "main",
      "init": "daisy.midi_nullData($<data>)",
      "code": "daisy.midi_fromData($<data>);"
    }
  },
  "hardware_description": {
    "schema_version": 1,
    "name": "Daisy Patch",
    "description": "Daisy Patch is a metamorphic sound environment capable of becoming an infinite variety of digital instruments.",
    "cv_inputs": [
      {
        "pin": 15,
        "flip": true,
        "invert": false,
        "bipolar": false,
        "labels": [
          "kn",
          "kn1",
          "knob1",
          "cv1",
          "cv",
          "ctrl",
          "ctrl1"
        ]
      },
      {
        "pin": 16,
        "flip": true,
        "invert": false,
        "bipolar": false,
        "labels": [
          "kn2",
          "knob2",
          "cv2",
          "ctrl2"
        ]
      },
      {
        "pin": 21,
        "flip": true,
        "invert": false,
        "bipolar": false,
        "labels": [
          "kn3",
          "knob3",
          "cv3",
          "ctrl3"
        ]
      },
      {
        "pin": 18,
        "flip": true,
        "invert": false,
        "bipolar": false,
        "labels": [
          "kn4",
          "knob4",
          "cv4",
          "ctrl4"
        ]
      }
    ],
    "cv_outputs": [
      {
        "labels": [
          "cvout1"
        ]
      },
      {
        "labels": [
          "cvout2"
        ]
      }
    ],
    "gate_inputs": [
      {
        "pin": 20,
        "labels": [
          "gt",
          "gt1",
          "gate",
          "gate1"
        ]
      },
      {
        "pin": 19,
        "labels": [
          "gt2",
          "gate2"
        ]
      }
    ],
    "gate_outputs": [
      {
        "pin": 17,
        "labels": [
          "gateout1"
        ]
      }
    ],
    "encoders": [
      {
        "pin_a": 27,
        "pin_b": 26,
        "pin_switch": 28,
        "labels": [
          "encoder"
        ]
      }
    ],
    "switches": [],
    "leds": [],
    "rgb_leds": [],
    "oled_displays": [
      {
        "driver": "SSD130x",
        "dimensions": "128x64",
        "transport": "4WireSpi",
        "4_wire_spi_config": {
          "pin_dc": 9,
          "pin_reset": 30
        }
      }
    ],
    "midi_handlers": [
      {
        "input": "UART1",
        "output": "UART1",
        "labels": [
          "midi"
        ]
      }
    ],
    "sdmmc_handlers": [
      {
        "speed": "FAST",
        "width": "BITS_4",
        "clock_powersave": false,
        "labels": [
          "sd"
        ]
      }
    ],
    "code_inserts": {
      "include": [
        "#include \"dev/codec_ak4556.h\""
      ],
      "declaration": [],
      "initialization": [
        "// Handle Seed Audio as-is and then",
        "SaiHandle::Config sai_config[2];",
        "// Internal Codec",
        "sai_config[0].periph          = SaiHandle::Config::Peripheral::SAI_1;",
        "sai_config[0].sr              = SaiHandle::Config::SampleRate::SAI_48KHZ;",
        "sai_config[0].bit_depth       = SaiHandle::Config::BitDepth::SAI_24BIT;",
        "sai_config[0].a_sync          = SaiHandle::Config::Sync::MASTER;",
        "sai_config[0].b_sync          = SaiHandle::Config::Sync::SLAVE;",
        "sai_config[0].a_dir           = SaiHandle::Config::Direction::TRANSMIT;",
        "sai_config[0].b_dir           = SaiHandle::Config::Direction::RECEIVE;",
        "sai_config[0].pin_config.fs   = {DSY_GPIOE, 4};",
        "sai_config[0].pin_config.mclk = {DSY_GPIOE, 2};",
        "sai_config[0].pin_config.sck  = {DSY_GPIOE, 5};",
        "sai_config[0].pin_config.sa   = {DSY_GPIOE, 6};",
        "sai_config[0].pin_config.sb   = {DSY_GPIOE, 3};",
        "// External Codec",
        "sai_config[1].periph          = SaiHandle::Config::Peripheral::SAI_2;",
        "sai_config[1].sr              = SaiHandle::Config::SampleRate::SAI_48KHZ;",
        "sai_config[1].bit_depth       = SaiHandle::Config::BitDepth::SAI_24BIT;",
        "sai_config[1].a_sync          = SaiHandle::Config::Sync::SLAVE;",
        "sai_config[1].b_sync          = SaiHandle::Config::Sync::MASTER;",
        "sai_config[1].a_dir           = SaiHandle::Config::Direction::TRANSMIT;",
        "sai_config[1].b_dir           = SaiHandle::Config::Direction::RECEIVE;",
        "sai_config[1].pin_config.fs   = seed.GetPin(27);",
        "sai_config[1].pin_config.mclk = seed.GetPin(24);",
        "sai_config[1].pin_config.sck  = seed.GetPin(28);",
        "sai_config[1].pin_config.sb   = seed.GetPin(25);",
        "sai_config[1].pin_config.sa   = seed.GetPin(26);",
        "SaiHandle sai_handle[2];",
        "sai_handle[0].Init(sai_config[0]);",
        "sai_handle[1].Init(sai_config[1]);",
        "// Reset Pin for AK4556",
        "// Built-in AK4556 was reset during Seed Init",
        "dsy_gpio_pin codec_reset_pin = seed.GetPin(29);",
        "Ak4556::Init(codec_reset_pin);",
        "// Reinit Audio for _both_ codecs...",
        "AudioHandle::Config audio_cfg;",
        "audio_cfg.blocksize  = 48;",
        "audio_cfg.samplerate = SaiHandle::Config::SampleRate::SAI_48KHZ;",
        "audio_cfg.postgain   = 0.5f;",
        "seed.audio_handle.Init(audio_cfg, sai_handle[0], sai_handle[1]);"
      ],
      "processing": [],
      "updating": []
    }
  }
}